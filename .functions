function is_success() {
    if [ $? -ne 0 ]; then
        exit 1
    fi
}

function check_if_directory_is_not_empty() {
    local directory=$1
    echo "checking if $directory exists and is empty..."
    if [[ -d "$directory" && -n "$(ls -A "$directory")" ]]; then
        echo "The $directory exists and is not empty."
        return 0
    else
        echo "The $directory either does not exist or is empty."
        return 1
    fi
}

function clone_repo() {
    local REPO_URL="$1"
    local REPO_DIR="$2"
    local REPO_CLONE_DIRECTORY=$REPO_DIR"/"$(echo "$REPO_URL" | awk -F/ '{print $(NF)}' | sed 's/\.git$//')
    echo "cloning into $REPO_CLONE_DIRECTORY"
    if check_if_directory_is_not_empty "$REPO_CLONE_DIRECTORY"; then
        echo "$REPO_CLONE_DIRECTORY already exists, checking for update if any..."
        cd $REPO_CLONE_DIRECTORY
        git pull 2>&1 | tee $log_dir/git
    else
        mkdir -p $REPO_CLONE_DIRECTORY
        # git clone $REPO_URL $REPO_CLONE_DIRECTORY 2>&1 | tee $log_dir/git
        # if [ "$REPO_URL" = "https://github.com/Tekenlight/service_utils.git" ]; then
        #     git clone -b path_added_install_directory $REPO_URL $REPO_CLONE_DIRECTORY 2>&1 | tee $log_dir/git
        # elif [ "$REPO_URL" = "https://github.com/Tekenlight/lua_schema.git" ]; then
        #     git clone -b path_change $REPO_URL $REPO_CLONE_DIRECTORY 2>&1 | tee $log_dir/git
        # elif [ "$REPO_URL" = "https://github.com/Tekenlightamit/evpoco.git" ]; then
        #     git clone -b build_changes $REPO_URL $REPO_CLONE_DIRECTORY 2>&1 | tee $log_dir/git
        elif [ "$REPO_URL" = "https://github.com/Tekenlight/lualogging.git" ]; then
            git clone -b logging $REPO_URL $REPO_CLONE_DIRECTORY 2>&1 | tee $log_dir/git
	    else
            git clone $REPO_URL $REPO_CLONE_DIRECTORY 2>&1 | tee $log_dir/git
        fi
    fi
    is_success
}

function clone_libraries() {
    local build_type=$1
    echo "cloning $build_type"
    if [ $build_type == "foundation" ]; then
        for REPO_URL in "${REPOS[@]}"; do
            clone_repo $REPO_URL $foundation_clone_dir
        done
    elif [ $build_type == "lua" ]; then
        for REPO_URL in "${LUA_REPOS[@]}"; do
            clone_repo $REPO_URL $lua_clone_dir
        done
    elif [ $build_type == "evpoco" ]; then
        clone_repo $EVPOCO $evlua_path
    else
        for REPO_URL in "${EVLUA_REPOS[@]}"; do
            clone_repo $REPO_URL $evlua_dir
        done
    fi
}

function configure_and_make() {
    local use_python=$1
    local type=$2
    echo "use python: $use_python and type: $type"
    # Run the autoreconf -i command and capture the output
    autoreconf -i | tee $log_dir/platform
    is_success
    if [ use_python == true ]; then
        echo "configuring $type with python"
        ./configure --prefix=$install_dir/usr --exec-prefix=$install_dir/usr 2>&1 | tee $log_dir/platform
    else
        echo "configuring $type without python"
        ./configure --without-python --prefix=$install_dir/usr --exec-prefix=$install_dir/usr 2>&1 | tee $log_dir/platform
    fi
    is_success
    make 2>&1 | tee $log_dir/platform
    is_success
    make install 2>&1 | tee $log_dir/platform
    is_success
}

function build_foundation() {
    # list all the clone directory and build cmake files
    for module in "$foundation_clone_dir"/*; do
        echo "Folder: $module"
        local dir=$(echo "$module" | awk -F/ '{print $(NF)}')
        echo "Directory name: $dir"
        if [ "$dir" == "libev" ] || [ "$dir" == "libxml2" ]; then
            echo "========== Installing: $dir =========="
            cd $module
            if [ "$dir" == "libxml2" ]; then
                configure_and_make false "libxml2"
            else
                configure_and_make true "libev"
            fi
            echo "========== Done =========="
        elif [ "$dir" == "http-parser" ]; then
            echo "========== Installing: $dir =========="
            cd $module
            make install PREFIX=/usr DESTDIR=$install_dir 2>&1 | tee $log_dir/platform
            is_success
            echo "========== Done =========="
        else
            echo "===================="
            echo "Creating build directory"
            local module_build_dir=$foundation_build_dir"/"$dir
            echo "Module build directory: $module_build_dir"
            mkdir -p $module_build_dir
            echo "===================="
            cd $module_build_dir
            echo "========== Building: $dir =========="
            cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr $foundation_clone_dir"/"$dir"/." 2>&1 | tee $log_dir/platform
            is_success
            cmake --build . 2>&1 | tee $log_dir/platform
            is_success
            echo "========== Installing: $dir =========="
            make install DESTDIR=$install_dir 2>&1 | tee $log_dir/platform
            is_success
            echo "========== Done =========="
        fi
    done
}

function build_custom_lua() {
    cd $lua_clone_dir/lua-5-3-5-build
    rm -rf $lua_clone_dir/lua-5-3-5-build/src
    mkdir -p $lua_clone_dir/lua-5-3-5-build/src
    cp -r ../lua/* ./src/

    if [ "$platform_name" == "arm64" ]; then
        echo "Building lua for macosx"
        make macosx 2>&1 | tee $log_dir/customlua
    else
        echo "Building lua for linux"
        make linux 2>&1 | tee $log_dir/customlua
    fi
    is_success
    mkdir -p $lua_path 2>&1 | tee $log_dir/customlua
    make install INSTALL_TOP=$lua_path 2>&1 | tee $log_dir/customlua
    is_success
    echo "========== Done =========="
}

function install_luarocks_if_not_already() {
    if check_if_directory_is_not_empty "$lua_rocks_path"; then
        echo "luarocks already installed..."
    else
        echo "luarocks not installed..."
        mkdir -p $third_party_library
        cd $third_party_library
        if ! check_if_directory_is_not_empty "$third_party_library/luarocks-3.8.0"; then
            wget https://luarocks.org/releases/luarocks-3.8.0.tar.gz 2>&1 | tee $log_dir/luarocks
            is_success
            tar xvzf luarocks-3.8.0.tar.gz 2>&1 | tee $log_dir/luarocks
            is_success
        fi
        cd luarocks-3.8.0
        mkdir -p $lua_rocks_path
        ./configure --prefix=$lua_rocks_path --rocks-tree=$install_dir/usr --with-lua=$lua_path 2>&1 | tee $log_dir/luarocks
        is_success
        make 2>&1 | tee $log_dir/luarocks
        is_success
        make install 2>&1 | tee $log_dir/luarocks
        is_success
    fi
}

function install_postgres_if_not_already() {
    if check_if_directory_is_not_empty "$postgres_path"; then
        echo "postgresql already installed..."
    else
        echo "psql not installed..."
        mkdir -p $third_party_library
        cd $third_party_library
        local ps_dir=$third_party_library"/postgresql-15.3"

        if ! check_if_directory_is_not_empty "$ps_dir"; then
            wget https://ftp.postgresql.org/pub/source/v15.3/postgresql-15.3.tar.gz 2>&1 | tee $log_dir/postgres
            is_success
            tar xvzf postgresql-15.3.tar.gz 2>&1 | tee $log_dir/postgres
            is_success
        fi
        echo "postgres will be installed in $postgres_path"
        cd $ps_dir
        CFLAGS=-fPIC ./configure 2>&1 | tee $log_dir/postgres
        is_success
        cd $ps_dir/src/interfaces/libpq/
        make >>$log_dir/postgres 2>&1 | tee $log_dir/postgres
        is_success
        make install DESTDIR=$postgres_path 2>&1 | tee $log_dir/postgres
        is_success
        cd $ps_dir/src/bin/pg_config
        make install DESTDIR=$postgres_path 2>&1 | tee $log_dir/postgres
        is_success
        cd $ps_dir/src/backend
        make generated-headers 2>&1 | tee $log_dir/postgres
        is_success
        cd $ps_dir/src/include
        make install DESTDIR=$postgres_path 2>&1 | tee $log_dir/postgres
        is_success
        cd $ps_dir/src/common
        make install DESTDIR=$postgres_path 2>&1 | tee $log_dir/postgres
        is_success
        cd $ps_dir/src/port
        make install DESTDIR=$postgres_path 2>&1 | tee $log_dir/postgres
        is_success
    fi
}

function build_and_install_evpoco() {
    echo "========== evpoco =========="
    clone_libraries evpoco
    local poco_build_dir=$foundation_build_dir"/evpoco"
    echo "========== Directory name: $poco_build_dir =========="
    mkdir -p $poco_build_dir
    cd $poco_build_dir
    if [ "$platform_name" == "arm64" ]; then
        echo "Building system for macosx"
        cmake -DPG_BUILD_PATH=$postgres_path -DCMAKE_INSTALL_PREFIX:PATH=$install_dir/usr -DCMAKE_ETC_PREFIX=$install_dir -DLUA_INSTALL_DIR=$lua_path -DTARGET_OS_OSX_HOMEBREW=1 -DCMAKE_OSX_ARCHITECTURES="arm64" $evlua_path/evpoco/. 2>&1 | tee $log_dir/evpoco
    else
        echo "Building system for ubuntu"
        cmake -DPG_BUILD_PATH=$postgres_path -DCMAKE_INSTALL_PREFIX:PATH=$install_dir/usr -DCMAKE_ETC_PREFIX=$install_dir -DLUA_INSTALL_DIR=$lua_path $evlua_path/evpoco/. 2>&1 | tee $log_dir/evpoco
    fi
    is_success
    cmake --build . 2>&1 | tee $log_dir/evpoco
    is_success
    make install 2>&1 | tee $log_dir/evpoco
    is_success
}

function build_evlua() {
    # list all the clone directory and build cmake files
    echo "== building evlua =="
    for module in "$evlua_dir"/*; do
        local dir=$(echo "$module" | awk -F/ '{print $(NF)}')
        echo "Installting: $dir"

        if [ $dir == "service_utils" ]; then
            cd $module
            cd ../lua-uri
            echo "Installting: lua-uri"
            $lua_rocks_path/bin/luarocks make 2>&1 | tee $log_dir/evlua
            is_success
        fi
        cd $module
        $lua_rocks_path/bin/luarocks make 2>&1 | tee $log_dir/evlua
        is_success
        echo "========== Done =========="
    done
}

function create_controlfile() {
    mkdir -p "$1"/DEBIAN/
    # File name
    file_name="control"

    if [ "x$PACKAGE_NAME" = "x" ]; then
        echo "package name not found. Please set PACKAGE_NAME"
        exit 1
    fi

    if [ "x$version" = "x" ]; then
        echo "release version not found. Please set version"
        exit 1
    fi

    # Multiline content using a Here Document
    cat <<EOF >"$1/DEBIAN/$file_name"
Package: $PACKAGE_NAME
Version: $version
Maintainer: $MAINTAINER
Architecture: $platform_name
Description: $DESCRIPTION
EOF
    is_success
    echo "File '$file_name' created successfully!"
}

function replace_luarocks_bin_files_meta() {
    local file_name="$2"/usr/local/bin/"$1"
    if [ ! -f "$file_name" ]; then
        echo "LuaRocks config file not found: $file_name"
        exit 1
    fi
    # Temporary file for replacement
    local tmp_file="/tmp/$1.lua"
    echo "#!/usr/local/bin/lua" >"$tmp_file"
    echo "package.loaded[\"luarocks.core.hardcoded\"] = { SYSCONFDIR = [[/usr/local/etc/luarocks]] }" >>"$tmp_file"
    echo "package.path=[[/usr/local/share/lua/5.3/?.lua;]] .. package.path" >>"$tmp_file"
    echo "local list = package.searchers or package.loaders; table.insert(list, 1, function(name) if name:match(\"^luarocks%.\") then return loadfile([[/usr/local/share/lua/5.3/]] .. name:gsub([[%.]], [[/]]) .. [[.lua]]) end end)" >>"$tmp_file"
    cat "$file_name" | tail -n +5 >>"$tmp_file"
    mv "$tmp_file" "$file_name"
}

function copy_and_configure_lua_and_luarocks() {
    local dev_path="$1"
    cp -r $lua_path/* $dev_path/usr/local/
    cp -r $lua_rocks_path/* $dev_path/usr/local/

     # Check if the config file exists
    local luarocks_config=$dev_path/usr/local/etc/luarocks/config-5.3.lua
    if [ ! -f "$luarocks_config" ]; then
        echo "LuaRocks config file not found: $luarocks_config"
        exit 1
    fi

    # New values
    local new_lua_dir="/usr/local"
    local new_lua_bindir="/usr/local/bin"

    # Update LUA_DIR, LUA_BINDIR, and root in the LuaRocks config file
    sed -i.bak -e "s|LUA_DIR = .*|LUA_DIR = \"$new_lua_dir\";|" -e "s|LUA_BINDIR = .*|LUA_BINDIR = \"$new_lua_bindir\";|" -e "s|name = \"system\", root =.*|name = \"system\", root = \"$new_lua_dir\" };|" "$luarocks_config"

    replace_luarocks_bin_files_meta luarocks $dev_path
    replace_luarocks_bin_files_meta luarocks-admin $dev_path

}

function copy_dev() {
    echo "copying dev files"
    local dev_path=$base_dir/dev
    rm -rf $dev_path
    mkdir -p $dev_path/usr/local $dev_path/etc
    cp -r $install_dir/usr/* $dev_path/usr/local/
    cp -r $install_dir/etc/* $dev_path/etc
    copy_and_configure_lua_and_luarocks $dev_path
}

function copy_prod() {
    echo "copying prod data"
    local prod_path=$base_dir/prod
    rm -rf $prod_path
    mkdir -p $prod_path/usr/bin $prod_path/usr/lib $prod_path/usr/share $prod_path/etc
    cp -r $install_dir/usr/bin $install_dir/usr/lib $install_dir/usr/share $prod_path/usr/
    cp -r $install_dir/etc/* $prod_path/etc
}

function check_old_installation() {
    cat <<EOF > "$1/DEBIAN/preinst"
    package_name="\$DPKG_MAINTSCRIPT_PACKAGE"
    remove_package_name="evlua"

    if [ "\$package_name" = "evlua" ]; then
	    remove_package_name="evlua-dev"
    elif [ "\$package_name" = "evlua-dev" ]; then
        remove_package_name="evlua"
    else
        remove_package_name=\$package_name
        exit 0
    fi

    installed_package=\$(dpkg -l | grep -e \$remove_package_name | awk '{print(\$2)}')

    echo "checking if [\${remove_package_name}] is already installed..."

    if [ "\$(echo "\$installed_package" | head -n 1)" = "\$remove_package_name" ]; then 
	echo "\n=========="
        echo "\$remove_package_name found, please uninstall it first before continuing, use command.."
        echo "sudo dpkg -r \$remove_package_name"
        echo "==========\n"
        exit 1 
    fi
EOF
    is_success
    echo "Preinst file created successfully!"
}

function build_executable() {
    echo "package name: $PACKAGE_NAME"

    if [ ! -z "$1" ]; then
        echo "setting base dir to $1"
        base_dir=$1
    fi

    local executable_path=$base_dir/executable
    mkdir -p $executable_path

    echo "building executable in $executable_path for $platform_name from $install_dir"
    copy_prod
    if [ -z "$2" ]; then
        copy_dev
    fi
    if [ "$platform_name" == "arm64" ]; then
        rm $executable_path/$PACKAGE_NAME-$version.dmg
        hdiutil create -format UDRW -srcfolder $base_dir/prod $executable_path/$PACKAGE_NAME-$version.dmg
        if [ -z "$2" ]; then
            PACKAGE_NAME=$PACKAGE_NAME"-dev"
            rm $executable_path/$PACKAGE_NAME-$version.dmg
            hdiutil create -format UDRW -srcfolder $base_dir/dev $executable_path/$PACKAGE_NAME-$version.dmg
        fi
    else
        if [ "$platform_name" = "aarch64" ]; then
            platform_name="arm64"
        fi
        create_controlfile $base_dir/prod
        check_old_installation $base_dir/prod
        chmod -R 755 $base_dir/prod/DEBIAN
        chmod -R 755 $base_dir/prod/usr
        rm $executable_path/$PACKAGE_NAME-$version.deb
        dpkg-deb --build $base_dir/prod $executable_path/$PACKAGE_NAME-$version.deb

        if [ -z "$2" ]; then
            PACKAGE_NAME=$PACKAGE_NAME"-dev"
            create_controlfile $base_dir/dev
            check_old_installation $base_dir/dev
            chmod -R 755 $base_dir/dev/DEBIAN
            chmod -R 755 $base_dir/dev/usr
            rm $executable_path/$PACKAGE_NAME-$version.deb
            dpkg-deb --build $base_dir/dev $executable_path/$PACKAGE_NAME-$version.deb
        fi
    fi
}
